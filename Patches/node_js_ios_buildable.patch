diff --git a/common.gypi b/common.gypi
index 8fdb6d36df..89d5ad3b6c 100644
--- a/common.gypi
+++ b/common.gypi
@@ -103,7 +103,7 @@
       }, {
         'openssl_product': '<(STATIC_LIB_PREFIX)openssl<(STATIC_LIB_SUFFIX)',
       }],
-      ['OS=="mac"', {
+      ['OS=="mac" or OS == "ios"', {
         'clang%': 1,
         'obj_dir%': '<(PRODUCT_DIR)/obj.target',
         'v8_base': '<(PRODUCT_DIR)/libv8_snapshot.a',
@@ -193,7 +193,7 @@
             # pull in V8's postmortem metadata
             'ldflags': [ '-Wl,-z,allextract' ]
           }],
-          ['OS!="mac" and OS!="win"', {
+          ['OS!="mac" and OS!="ios" and OS!="win"', {
             'cflags': [ '-fno-omit-frame-pointer' ],
           }],
           ['OS=="linux"', {
@@ -319,7 +319,7 @@
       [ 'target_arch=="arm64"', {
         'msvs_configuration_platform': 'arm64',
       }],
-      ['asan == 1 and OS != "mac"', {
+      ['asan == 1 and OS != "mac" and OS != "ios"', {
         'cflags+': [
           '-fno-omit-frame-pointer',
           '-fsanitize=address',
@@ -329,7 +329,7 @@
         'cflags!': [ '-fomit-frame-pointer' ],
         'ldflags': [ '-fsanitize=address' ],
       }],
-      ['asan == 1 and OS == "mac"', {
+      ['asan == 1 and (OS == "mac" or OS == "ios")', {
         'xcode_settings': {
           'OTHER_CFLAGS+': [
             '-fno-omit-frame-pointer',
@@ -511,7 +511,7 @@
           ['target_arch=="arm64"', {
             'xcode_settings': {
               'ARCHS': ['arm64'],
-              'OTHER_LDFLAGS!': [
+              'OTHER_LDFLAGS': [
                 '-Wl,-no_pie',
               ],
             },
@@ -525,6 +525,96 @@
           }],
         ],
       }],
+      ['OS=="ios"', {
+        'defines': ['_DARWIN_USE_64_BIT_INODE=1'],
+        'xcode_settings': {
+          'ALWAYS_SEARCH_USER_PATHS': 'NO',
+          'GCC_CW_ASM_SYNTAX': 'NO',                # No -fasm-blocks
+          'GCC_DYNAMIC_NO_PIC': 'NO',               # No -mdynamic-no-pic
+                                                    # (Equivalent to -fPIC)
+          'GCC_ENABLE_CPP_EXCEPTIONS': 'NO',        # -fno-exceptions
+          'GCC_ENABLE_CPP_RTTI': 'NO',              # -fno-rtti
+          'GCC_ENABLE_PASCAL_STRINGS': 'NO',        # No -mpascal-strings
+          'PREBINDING': 'NO',                       # No -Wl,-prebind
+          'IPHONEOS_DEPLOYMENT_TARGET': '9.0',      # -miphoneos-version-min=9.0
+          'USE_HEADERMAP': 'NO',
+          'OTHER_CFLAGS': [
+            '-fno-strict-aliasing',
+          ],
+          'WARNING_CFLAGS': [
+            '-Wall',
+            '-Wendif-labels',
+            '-W',
+            '-Wno-unused-parameter',
+          ],
+        },
+        'target_conditions': [
+          ['_toolset!="host" and target_arch=="arm64"', {
+            'xcode_settings': {
+              'WARNING_CFLAGS': [
+                '-arch arm64'
+              ]
+            }
+          }],
+          ['_toolset!="host" and target_arch=="x64"', {
+            'xcode_settings': {
+              'WARNING_CFLAGS': [
+                '-arch x86_64'
+              ]
+            }
+          }],
+          ['_type!="static_library"', {
+            'xcode_settings': {
+              'OTHER_LDFLAGS': [
+                '-Wl,-no_pie',
+                '-Wl,-search_paths_first',
+              ],
+            },
+          }]
+        ],
+        'conditions': [
+          ['target_arch=="ia32"', {
+            'xcode_settings': {'ARCHS': ['i386']},
+          }],
+          ['target_arch=="x64"', {
+            'xcode_settings': {'ARCHS': ['x86_64']},
+          }],
+          [ 'target_arch in "arm64 arm64e arm armv7s"', {
+            'xcode_settings': {
+              'OTHER_CFLAGS': [
+                '-fembed-bitcode'
+              ],
+              'OTHER_CPLUSPLUSFLAGS': [
+                '-fembed-bitcode'
+              ],
+            }
+          }],
+          [ 'target_arch=="arm64e"', {
+            'xcode_settings': {'ARCHS': ['arm64e']},
+          }],
+          [ 'target_arch=="arm64"', {
+            'xcode_settings': {'ARCHS': ['arm64']},
+          }],
+          [ 'target_arch=="arm"', {
+            'xcode_settings': {'ARCHS': ['armv7']},
+          }],
+          [ 'target_arch=="armv7s"', {
+            'xcode_settings': {'ARCHS': ['armv7s']},
+          }],
+          ['clang==1', {
+            'xcode_settings': {
+              'GCC_VERSION': 'com.apple.compilers.llvm.clang.1_0',
+              'CLANG_CXX_LANGUAGE_STANDARD': 'gnu++1y',  # -std=gnu++1y
+              'CLANG_CXX_LIBRARY': 'libc++',
+            },
+          }],
+          ['target_arch=="x64" or target_arch=="ia32"', {
+            'xcode_settings': { 'SDKROOT': 'iphonesimulator' },
+          }, {
+            'xcode_settings': { 'SDKROOT': 'iphoneos', 'ENABLE_BITCODE': 'YES' },
+          }],
+        ],
+      }],
       ['OS=="freebsd" and node_use_dtrace=="true"', {
         'libraries': [ '-lelf' ],
       }],
diff --git a/configure.py b/configure.py
index c56559626d..9320c72bd4 100755
--- a/configure.py
+++ b/configure.py
@@ -52,7 +52,7 @@ from fetch_deps import FetchDeps
 # parse our options
 parser = optparse.OptionParser()
 
-valid_os = ('win', 'mac', 'solaris', 'freebsd', 'openbsd', 'linux',
+valid_os = ('win', 'mac', 'ios', 'solaris', 'freebsd', 'openbsd', 'linux',
             'android', 'aix', 'cloudabi')
 valid_arch = ('arm', 'arm64', 'ia32', 'mips', 'mipsel', 'mips64el', 'ppc',
               'ppc64', 'x32','x64', 'x86', 'x86_64', 's390x')
@@ -1058,6 +1058,8 @@ def gcc_version_ge(version_checked):
 def configure_node(o):
   if options.dest_os == 'android':
     o['variables']['OS'] = 'android'
+  if options.dest_os == 'ios':
+    o['variables']['OS'] = 'ios'
   o['variables']['node_prefix'] = options.prefix
   o['variables']['node_install_npm'] = b(not options.without_npm)
   o['variables']['debug_node'] = b(options.debug_node)
diff --git a/deps/cares/cares.gyp b/deps/cares/cares.gyp
index 0dc4ff9317..d7e88e3920 100644
--- a/deps/cares/cares.gyp
+++ b/deps/cares/cares.gyp
@@ -154,7 +154,7 @@
           'include_dirs': [ 'config/linux' ],
           'sources': [ 'config/linux/ares_config.h' ]
         }],
-        [ 'OS=="mac"', {
+        [ 'OS=="mac" or OS=="ios"', {
           'include_dirs': [ 'config/darwin' ],
           'sources': [ 'config/darwin/ares_config.h' ]
         }],
diff --git a/deps/openssl/config/opensslconf.h b/deps/openssl/config/opensslconf.h
index 9c492032b0..f5b3b013d8 100644
--- a/deps/openssl/config/opensslconf.h
+++ b/deps/openssl/config/opensslconf.h
@@ -17,6 +17,13 @@
 #ifndef OPENSSL_NO_HW_PADLOCK
 # define OPENSSL_NO_HW_PADLOCK
 #endif
+/* iOS app store won't allow getcontext, setcontext, makecontext */
+#if defined(__APPLE__) && defined(__MACH__)
+# include <TargetConditionals.h>
+# if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
+#  define OPENSSL_NO_ASYNC
+# endif
+#endif
 /* musl in Alpine Linux does not support getcontext etc.*/
 #if defined(OPENSSL_LINUX) && !defined(__GLIBC__) && !defined(__clang__)
 # define OPENSSL_NO_ASYNC
diff --git a/deps/openssl/openssl_common.gypi b/deps/openssl/openssl_common.gypi
index d866630f44..af9d1ed59e 100644
--- a/deps/openssl/openssl_common.gypi
+++ b/deps/openssl/openssl_common.gypi
@@ -1,8 +1,8 @@
 {
   'include_dirs': [
     'openssl/',
-    'openssl/include/',
     'openssl/crypto/',
+    'openssl/include/',
     'openssl/crypto/include/',
     'openssl/crypto/modes/',
     'openssl/crypto/ec/curve448',
@@ -42,7 +42,7 @@
           '-luser32.lib',
         ],
       },
-    }, 'OS=="mac"', {
+    }, 'OS=="mac" or OS=="ios"', {
       'xcode_settings': {
         'WARNING_CFLAGS': ['-Wno-missing-field-initializers']
       },
diff --git a/deps/uv/src/unix/darwin.c b/deps/uv/src/unix/darwin.c
index d0ecd452d8..ea0f06a278 100644
--- a/deps/uv/src/unix/darwin.c
+++ b/deps/uv/src/unix/darwin.c
@@ -33,9 +33,7 @@
 #include <sys/sysctl.h>
 #include <unistd.h>  /* sysconf */
 
-#if !TARGET_OS_IPHONE
 #include "darwin-stub.h"
-#endif
 
 static uv_once_t once = UV_ONCE_INIT;
 static uint64_t (*time_func)(void);
@@ -335,7 +333,12 @@ int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count) {
     return UV__ERR(errno);
   }
 
-  err = uv__get_cpu_speed(&cpuspeed);
+  #if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE
+    err = 0;
+  #else
+    err = uv__get_cpu_speed(&cpuspeed);
+  #endif
+  
   if (err < 0)
     return err;
 
diff --git a/deps/v8/src/wasm/code-space-access.h b/deps/v8/src/wasm/code-space-access.h
index 5eeb980e17..521ff5bdc1 100644
--- a/deps/v8/src/wasm/code-space-access.h
+++ b/deps/v8/src/wasm/code-space-access.h
@@ -12,7 +12,7 @@
 namespace v8 {
 namespace internal {
 
-#if defined(V8_OS_MACOSX) && defined(V8_HOST_ARCH_ARM64)
+#if defined(V8_OS_MACOSX) && defined(V8_HOST_ARCH_ARM64) && !defined(TARGET_OS_IPHONE)
 
 // Ignoring this warning is considered better than relying on
 // __builtin_available.
diff --git a/deps/v8/src/wasm/wasm-code-manager.cc b/deps/v8/src/wasm/wasm-code-manager.cc
index b6914710e1..179acd506f 100644
--- a/deps/v8/src/wasm/wasm-code-manager.cc
+++ b/deps/v8/src/wasm/wasm-code-manager.cc
@@ -49,7 +49,7 @@ namespace wasm {
 
 using trap_handler::ProtectedInstructionData;
 
-#if defined(V8_OS_MACOSX) && defined(V8_HOST_ARCH_ARM64)
+#if defined(V8_OS_MACOSX) && defined(V8_HOST_ARCH_ARM64) && !defined(TARGET_OS_IPHONE)
 thread_local int CodeSpaceWriteScope::code_space_write_nesting_level_ = 0;
 #endif
 
diff --git a/lib/child_process.js b/lib/child_process.js
index 42bdaa8644..7c981e035c 100644
--- a/lib/child_process.js
+++ b/lib/child_process.js
@@ -577,7 +577,7 @@ function spawn(file, args, options) {
 
   options = normalizeSpawnArguments(file, args, options);
   debug('spawn', options);
-  child.spawn(options);
+  // child.spawn(options);
 
   return child;
 }
diff --git a/lib/internal/bootstrap/node.js b/lib/internal/bootstrap/node.js
index 2705f8b50a..0bdd4c4f0e 100644
--- a/lib/internal/bootstrap/node.js
+++ b/lib/internal/bootstrap/node.js
@@ -226,6 +226,9 @@ ObjectDefineProperty(process, 'features', {
 const { emitWarning } = require('internal/process/warning');
 process.emitWarning = emitWarning;
 
+const webAssemblyPolyfill = require('internal/deps/webassembly/index');
+exposeNamespace(global, 'WebAssembly', webAssemblyPolyfill);
+
 // We initialize the tick callbacks and the timer callbacks last during
 // bootstrap to make sure that any operation done before this are synchronous.
 // If any ticks or timers are scheduled before this they are unlikely to work.
diff --git a/node.gyp b/node.gyp
index 59ba758e73..d543e823c6 100644
--- a/node.gyp
+++ b/node.gyp
@@ -261,6 +261,101 @@
       'deps/acorn-plugins/acorn-static-class-features/index.js',
       'deps/cjs-module-lexer/lexer.js',
       'deps/cjs-module-lexer/dist/lexer.js',
+      'deps/webassembly_internal/wasm-parser/decoder.js',
+      'deps/webassembly_internal/wasm-parser/index.js',
+      'deps/webassembly_internal/wasm-parser/types/decoder.js',
+      'deps/webassembly_internal/wasm-gen/index.js',
+      'deps/webassembly_internal/wasm-gen/encoder/index.js',
+      'deps/webassembly_internal/helper-numbers/index.js',
+      'deps/webassembly_internal/helper-code-frame/index.js',
+      'deps/webassembly_internal/helper-wasm-section/remove.js',
+      'deps/webassembly_internal/helper-wasm-section/index.js',
+      'deps/webassembly_internal/helper-wasm-section/create.js',
+      'deps/webassembly_internal/helper-wasm-section/resize.js',
+      'deps/webassembly_internal/floating-point-hex-parser/index.js',
+      'deps/webassembly_internal/utf8/encoder.js',
+      'deps/webassembly_internal/utf8/decoder.js',
+      'deps/webassembly_internal/utf8/index.js',
+      'deps/webassembly_internal/wasm-edit/index.js',
+      'deps/webassembly_internal/wasm-edit/apply.js',
+      'deps/webassembly_internal/wast-printer/index.js',
+      'deps/webassembly_internal/helper-wasm-bytecode/section.js',
+      'deps/webassembly_internal/helper-wasm-bytecode/index.js',
+      'deps/webassembly_internal/helper-fsm/index.js',
+      'deps/webassembly_internal/helper-compiler/index.js',
+      'deps/webassembly_internal/helper-compiler/module.js',
+      'deps/webassembly_internal/helper-compiler/printer.js',
+      'deps/webassembly_internal/ieee754/index.js',
+      'deps/webassembly_internal/wast-parser/number-literals.js',
+      'deps/webassembly_internal/wast-parser/grammar.js',
+      'deps/webassembly_internal/wast-parser/index.js',
+      'deps/webassembly_internal/wast-parser/tokenizer.js',
+      'deps/webassembly_internal/wast-parser/string-literals.js',
+      'deps/webassembly_internal/helper-buffer/index.js',
+      'deps/webassembly_internal/helper-buffer/compare.js',
+      'deps/webassembly_internal/helper-api-error/index.js',
+      'deps/webassembly_internal/helper-module-context/index.js',
+      'deps/webassembly_internal/ast/traverse.js',
+      'deps/webassembly_internal/ast/node-path.js',
+      'deps/webassembly_internal/ast/index.js',
+      'deps/webassembly_internal/ast/definitions.js',
+      'deps/webassembly_internal/ast/nodes.js',
+      'deps/webassembly_internal/ast/node-helpers.js',
+      'deps/webassembly_internal/ast/clone.js',
+      'deps/webassembly_internal/ast/utils.js',
+      'deps/webassembly_internal/ast/signatures.js',
+      'deps/webassembly_internal/ast/types/traverse.js',
+      'deps/webassembly_internal/ast/types/nodes.js',
+      'deps/webassembly_internal/ast/types/basic.js',
+      'deps/webassembly_internal/ast/transform/denormalize-type-references/index.js',
+      'deps/webassembly_internal/ast/transform/wast-identifier-to-index/index.js',
+      'deps/webassembly_internal/ast/transform/ast-module-to-module-context/index.js',
+      'deps/webassembly_internal/helper-flatten-ast/index.js',
+      'deps/webassembly_internal/wasm-opt/leb128.js',
+      'deps/webassembly_internal/wasm-opt/index.js',
+      'deps/webassembly_internal/leb128/bits.js',
+      'deps/webassembly_internal/leb128/index.js',
+      'deps/webassembly_internal/leb128/leb.js',
+      'deps/webassembly_internal/leb128/bufs.js',
+      'deps/webassembly_internal/validation/imports.js',
+      'deps/webassembly_internal/validation/index.js',
+      'deps/webassembly_internal/validation/type-checker.js',
+      'deps/webassembly_internal/validation/is-const.js',
+      'deps/webassembly_internal/validation/import-order.js',
+      'deps/webassembly_internal/validation/duplicated-exports.js',
+      'deps/webassembly_internal/validation/type-inference.js',
+      'deps/webassembly_internal/validation/type-checker/types.js',
+      'deps/webassembly_internal/validation/type-checker/get-type.js',
+      'deps/webassembly/index.js',
+      'deps/webassembly/check-endianness.js',
+      'deps/webassembly/errors.js',
+      'deps/webassembly/interpreter/import-object.js',
+      'deps/webassembly/interpreter/index.js',
+      'deps/webassembly/interpreter/partial-evaluation.js',
+      'deps/webassembly/interpreter/host-func.js',
+      'deps/webassembly/interpreter/runtime/castIntoStackLocalOfType.js',
+      'deps/webassembly/interpreter/runtime/values/number.js',
+      'deps/webassembly/interpreter/runtime/values/f32.js',
+      'deps/webassembly/interpreter/runtime/values/i64.js',
+      'deps/webassembly/interpreter/runtime/values/memory.js',
+      'deps/webassembly/interpreter/runtime/values/global.js',
+      'deps/webassembly/interpreter/runtime/values/extern.js',
+      'deps/webassembly/interpreter/runtime/values/table.js',
+      'deps/webassembly/interpreter/runtime/values/module.js',
+      'deps/webassembly/interpreter/runtime/values/func.js',
+      'deps/webassembly/interpreter/runtime/values/i32.js',
+      'deps/webassembly/interpreter/runtime/values/f64.js',
+      'deps/webassembly/interpreter/runtime/values/label.js',
+      'deps/webassembly/interpreter/kernel/exec.js',
+      'deps/webassembly/interpreter/kernel/signals.js',
+      'deps/webassembly/interpreter/kernel/memory.js',
+      'deps/webassembly/interpreter/kernel/stackframe.js',
+      'deps/webassembly/interpreter/kernel/instruction/unop.js',
+      'deps/webassembly/interpreter/kernel/instruction/binop.js',
+      'deps/webassembly/interpreter/kernel/instruction/comparison.js',
+      'deps/webassembly/compiler/compile/module.js',
+      'deps/long/index.js',
+      'deps/ieee754/index.js'
     ],
     'node_mksnapshot_exec': '<(PRODUCT_DIR)/<(EXECUTABLE_PREFIX)node_mksnapshot<(EXECUTABLE_SUFFIX)',
     'mkcodecache_exec': '<(PRODUCT_DIR)/<(EXECUTABLE_PREFIX)mkcodecache<(EXECUTABLE_SUFFIX)',
@@ -421,7 +516,7 @@
             },
           },
           'conditions': [
-            ['OS != "aix" and OS != "mac"', {
+            ['OS != "aix" and OS != "mac" and OS != "ios"', {
               'ldflags': [
                 '-Wl,--whole-archive',
                 '<(obj_dir)/<(STATIC_LIB_PREFIX)<(node_core_target_name)<(STATIC_LIB_SUFFIX)',
@@ -503,8 +598,12 @@
             },
           ],
         }, {
-          'sources': [
-            'src/node_code_cache_stub.cc'
+          'conditions': [
+            [ 'not (node_target_type=="static_library" and OS=="ios")', {
+              'sources': [
+                'src/node_code_cache_stub.cc'
+              ],
+            }],
           ],
         }],
         ['node_use_node_snapshot=="true"', {
@@ -528,8 +627,12 @@
             },
           ],
         }, {
-          'sources': [
-            'src/node_snapshot_stub.cc'
+          'conditions': [
+            [ 'not (node_target_type=="static_library" and OS=="ios")', {
+              'sources': [
+                'src/node_snapshot_stub.cc'
+              ],
+            }],
           ],
         }],
         [ 'OS in "linux freebsd" and '
@@ -706,6 +809,7 @@
         'src/node_mutex.h',
         'src/node_native_module.h',
         'src/node_native_module_env.h',
+        'src/ide_node_engine_version.h',
         'src/node_object_wrap.h',
         'src/node_options.h',
         'src/node_options-inl.h',
@@ -755,6 +859,98 @@
         'deps/v8/include/v8.h',
         # javascript files to make for an even more pleasant IDE experience
         '<@(library_files)',
+        'deps/webassembly_internal/wasm-parser/decoder.js',
+        'deps/webassembly_internal/wasm-parser/index.js',
+        'deps/webassembly_internal/wasm-parser/types/decoder.js',
+        'deps/webassembly_internal/wasm-gen/index.js',
+        'deps/webassembly_internal/wasm-gen/encoder/index.js',
+        'deps/webassembly_internal/helper-numbers/index.js',
+        'deps/webassembly_internal/helper-code-frame/index.js',
+        'deps/webassembly_internal/helper-wasm-section/remove.js',
+        'deps/webassembly_internal/helper-wasm-section/index.js',
+        'deps/webassembly_internal/helper-wasm-section/create.js',
+        'deps/webassembly_internal/helper-wasm-section/resize.js',
+        'deps/webassembly_internal/floating-point-hex-parser/index.js',
+        'deps/webassembly_internal/utf8/encoder.js',
+        'deps/webassembly_internal/utf8/decoder.js',
+        'deps/webassembly_internal/utf8/index.js',
+        'deps/webassembly_internal/wasm-edit/index.js',
+        'deps/webassembly_internal/wasm-edit/apply.js',
+        'deps/webassembly_internal/wast-printer/index.js',
+        'deps/webassembly_internal/helper-wasm-bytecode/section.js',
+        'deps/webassembly_internal/helper-wasm-bytecode/index.js',
+        'deps/webassembly_internal/helper-fsm/index.js',
+        'deps/webassembly_internal/helper-compiler/index.js',
+        'deps/webassembly_internal/helper-compiler/module.js',
+        'deps/webassembly_internal/helper-compiler/printer.js',
+        'deps/webassembly_internal/ieee754/index.js',
+        'deps/webassembly_internal/wast-parser/number-literals.js',
+        'deps/webassembly_internal/wast-parser/grammar.js',
+        'deps/webassembly_internal/wast-parser/index.js',
+        'deps/webassembly_internal/wast-parser/tokenizer.js',
+        'deps/webassembly_internal/wast-parser/string-literals.js',
+        'deps/webassembly_internal/helper-buffer/index.js',
+        'deps/webassembly_internal/helper-buffer/compare.js',
+        'deps/webassembly_internal/helper-api-error/index.js',
+        'deps/webassembly_internal/helper-module-context/index.js',
+        'deps/webassembly_internal/ast/traverse.js',
+        'deps/webassembly_internal/ast/node-path.js',
+        'deps/webassembly_internal/ast/index.js',
+        'deps/webassembly_internal/ast/definitions.js',
+        'deps/webassembly_internal/ast/nodes.js',
+        'deps/webassembly_internal/ast/node-helpers.js',
+        'deps/webassembly_internal/ast/clone.js',
+        'deps/webassembly_internal/ast/utils.js',
+        'deps/webassembly_internal/ast/signatures.js',
+        'deps/webassembly_internal/ast/types/traverse.js',
+        'deps/webassembly_internal/ast/types/nodes.js',
+        'deps/webassembly_internal/ast/types/basic.js',
+        'deps/webassembly_internal/ast/transform/denormalize-type-references/index.js',
+        'deps/webassembly_internal/ast/transform/wast-identifier-to-index/index.js',
+        'deps/webassembly_internal/helper-flatten-ast/index.js',
+        'deps/webassembly_internal/wasm-opt/leb128.js',
+        'deps/webassembly_internal/wasm-opt/index.js',
+        'deps/webassembly_internal/leb128/bits.js',
+        'deps/webassembly_internal/leb128/index.js',
+        'deps/webassembly_internal/leb128/leb.js',
+        'deps/webassembly_internal/leb128/bufs.js',
+        'deps/webassembly_internal/validation/imports.js',
+        'deps/webassembly_internal/validation/index.js',
+        'deps/webassembly_internal/validation/type-checker.js',
+        'deps/webassembly_internal/validation/is-const.js',
+        'deps/webassembly_internal/validation/import-order.js',
+        'deps/webassembly_internal/validation/duplicated-exports.js',
+        'deps/webassembly_internal/validation/type-inference.js',
+        'deps/webassembly_internal/validation/type-checker/types.js',
+        'deps/webassembly_internal/validation/type-checker/get-type.js',
+        'deps/webassembly/index.js',
+        'deps/webassembly/check-endianness.js',
+        'deps/webassembly/errors.js',
+        'deps/webassembly/interpreter/import-object.js',
+        'deps/webassembly/interpreter/index.js',
+        'deps/webassembly/interpreter/partial-evaluation.js',
+        'deps/webassembly/interpreter/host-func.js',
+        'deps/webassembly/interpreter/runtime/castIntoStackLocalOfType.js',
+        'deps/webassembly/interpreter/runtime/values/number.js',
+        'deps/webassembly/interpreter/runtime/values/f32.js',
+        'deps/webassembly/interpreter/runtime/values/i64.js',
+        'deps/webassembly/interpreter/runtime/values/memory.js',
+        'deps/webassembly/interpreter/runtime/values/global.js',
+        'deps/webassembly/interpreter/runtime/values/extern.js',
+        'deps/webassembly/interpreter/runtime/values/table.js',
+        'deps/webassembly/interpreter/runtime/values/module.js',
+        'deps/webassembly/interpreter/runtime/values/func.js',
+        'deps/webassembly/interpreter/runtime/values/i32.js',
+        'deps/webassembly/interpreter/runtime/values/f64.js',
+        'deps/webassembly/interpreter/runtime/values/label.js',
+        'deps/webassembly/interpreter/kernel/exec.js',
+        'deps/webassembly/interpreter/kernel/signals.js',
+        'deps/webassembly/interpreter/kernel/memory.js',
+        'deps/webassembly/interpreter/kernel/stackframe.js',
+        'deps/webassembly/interpreter/kernel/instruction/unop.js',
+        'deps/webassembly/interpreter/kernel/instruction/binop.js',
+        'deps/webassembly/interpreter/kernel/instruction/comparison.js',
+        'deps/webassembly/compiler/compile/module.js',
         # node.gyp is added by default, common.gypi is added for change detection
         'common.gypi',
       ],
@@ -798,6 +994,12 @@
             'src/node_code_cache_stub.cc',
           ]
         }],
+        [ 'node_target_type=="static_library" and OS=="ios"', {
+          'sources': [
+            'src/node_snapshot_stub.cc',
+            'src/node_code_cache_stub.cc',
+          ]
+        }],
         [ 'node_shared=="true" and node_module_version!="" and OS!="win"', {
           'product_extension': '<(shlib_suffix)',
           'xcode_settings': {
@@ -885,7 +1087,7 @@
                 '<(SHARED_INTERMEDIATE_DIR)/node_dtrace_provider.o'
               ],
             }],
-            [ 'OS!="mac" and OS!="linux"', {
+            [ 'OS!="mac" and OS != "ios" and OS!="linux"', {
               'sources': [
                 'src/node_dtrace_ustack.cc',
                 'src/node_dtrace_provider.cc',
@@ -909,7 +1111,7 @@
             'src/tls_wrap.h'
           ],
         }],
-        [ 'OS in "linux freebsd mac solaris" and '
+        [ 'OS in "linux freebsd mac ios solaris" and '
           'target_arch=="x64" and '
           'node_target_type=="executable"', {
           'defines': [ 'NODE_ENABLE_LARGE_CODE_PAGES=1' ],
@@ -1033,7 +1235,7 @@
       'target_name': 'node_dtrace_provider',
       'type': 'none',
       'conditions': [
-        [ 'node_use_dtrace=="true" and OS!="mac" and OS!="linux"', {
+        [ 'node_use_dtrace=="true" and OS!="mac" and OS!="ios" and OS!="linux"', {
           'actions': [
             {
               'action_name': 'node_dtrace_provider_o',
@@ -1068,7 +1270,7 @@
       'target_name': 'node_dtrace_ustack',
       'type': 'none',
       'conditions': [
-        [ 'node_use_dtrace=="true" and OS!="mac" and OS!="linux"', {
+        [ 'node_use_dtrace=="true" and OS!="mac" and OS!="ios" and OS!="linux"', {
           'actions': [
             {
               'action_name': 'node_dtrace_ustack_constants',
@@ -1247,8 +1449,6 @@
       ],
 
       'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
         'test/cctest/gtest/gtest-all.cc',
         'test/cctest/gtest/gtest_main.cc',
         'test/cctest/node_test_fixture.cc',
@@ -1269,6 +1469,12 @@
       ],
 
       'conditions': [
+        [ 'not (node_target_type=="static_library" and OS=="ios")', {
+          'sources': [
+            'src/node_snapshot_stub.cc',
+            'src/node_code_cache_stub.cc',
+          ]
+        }],
         [ 'node_use_openssl=="true"', {
           'defines': [
             'HAVE_OPENSSL=1',
@@ -1398,14 +1604,18 @@
         'NODE_WANT_INTERNALS=1'
       ],
       'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
         'tools/code_cache/mkcodecache.cc',
         'tools/code_cache/cache_builder.cc',
         'tools/code_cache/cache_builder.h',
       ],
 
       'conditions': [
+        [ 'not (node_target_type=="static_library" and OS=="ios")', {
+          'sources': [
+            'src/node_snapshot_stub.cc',
+            'src/node_code_cache_stub.cc',
+          ]
+        }],
         [ 'node_use_openssl=="true"', {
           'defines': [
             'HAVE_OPENSSL=1',
@@ -1452,14 +1662,18 @@
       'defines': [ 'NODE_WANT_INTERNALS=1' ],
 
       'sources': [
-        'src/node_snapshot_stub.cc',
-        'src/node_code_cache_stub.cc',
         'tools/snapshot/node_mksnapshot.cc',
         'tools/snapshot/snapshot_builder.cc',
         'tools/snapshot/snapshot_builder.h',
       ],
 
       'conditions': [
+        [ 'not (node_target_type=="static_library" and OS=="ios")', {
+          'sources': [
+            'src/node_snapshot_stub.cc',
+            'src/node_code_cache_stub.cc',
+          ]
+        }],
         [ 'node_use_openssl=="true"', {
           'defines': [
             'HAVE_OPENSSL=1',
diff --git a/node.gypi b/node.gypi
index 43dbda7bbf..aa3433fd82 100644
--- a/node.gypi
+++ b/node.gypi
@@ -281,7 +281,7 @@
         ],
       },
     }],
-    [ 'coverage=="true" and node_shared=="false" and OS in "mac freebsd linux"', {
+    [ 'coverage=="true" and node_shared=="false" and OS in "mac ios freebsd linux"', {
       'cflags!': [ '-O3' ],
       'ldflags': [ '--coverage',
                    '-g',
@@ -369,6 +369,11 @@
     }, {
       'defines': [ 'HAVE_OPENSSL=0' ]
     }],
+    [ 'OS=="android" or OS=="ios"', {
+      'defines': [
+        'IDE_NODE_ENGINE',
+      ],
+    }],
 
   ],
 }
diff --git a/src/node_metadata.cc b/src/node_metadata.cc
index 8d0a725de4..dae40b69dd 100644
--- a/src/node_metadata.cc
+++ b/src/node_metadata.cc
@@ -20,6 +20,10 @@
 #include <unicode/uversion.h>
 #endif  // NODE_HAVE_I18N_SUPPORT
 
+#ifdef IDE_NODE_ENGINE
+#include "ide_node_engine_version.h"
+#endif // IDE_NODE_ENGINE
+
 namespace node {
 
 namespace per_process {
@@ -87,6 +91,10 @@ Metadata::Versions::Versions() {
     "." +
     std::to_string(BrotliEncoderVersion() & 0xFFF);
 
+#ifdef IDE_NODE_ENGINE
+  ide_node_engine = IDE_NODE_ENGINE_VERSION_STRING;
+#endif  // IDE_NODE_ENGINE
+
 #if HAVE_OPENSSL
   openssl = GetOpenSSLVersion();
 #endif
diff --git a/src/node_metadata.h b/src/node_metadata.h
index bf7e5d3ff4..fa0ffc5b05 100644
--- a/src/node_metadata.h
+++ b/src/node_metadata.h
@@ -31,6 +31,7 @@ namespace node {
   V(nghttp2)                                                                   \
   V(napi)                                                                      \
   V(llhttp)                                                                    \
+  V(mobile)
 
 #if HAVE_OPENSSL
 #define NODE_VERSIONS_KEY_CRYPTO(V) V(openssl)
@@ -48,6 +49,13 @@ namespace node {
 #define NODE_VERSIONS_KEY_INTL(V)
 #endif  // NODE_HAVE_I18N_SUPPORT
 
+#ifdef IDE_NODE_ENGINE
+#define NODE_VERSIONS_KEY_MOBILE(V)                                            \
+  V(ide_node_engine)
+#else
+#define NODE_VERSIONS_KEY_MOBILE(V)
+#endif  //IDE_NODE_ENGINE
+
 #define NODE_VERSIONS_KEYS(V)                                                  \
   NODE_VERSIONS_KEYS_BASE(V)                                                   \
   NODE_VERSIONS_KEY_CRYPTO(V)                                                  \
diff --git a/src/spawn_sync.cc b/src/spawn_sync.cc
index 1141aceae9..f7842b7c30 100644
--- a/src/spawn_sync.cc
+++ b/src/spawn_sync.cc
@@ -369,12 +369,12 @@ void SyncProcessRunner::Initialize(Local<Object> target,
 
 
 void SyncProcessRunner::Spawn(const FunctionCallbackInfo<Value>& args) {
-  Environment* env = Environment::GetCurrent(args);
-  env->PrintSyncTrace();
-  SyncProcessRunner p(env);
-  Local<Value> result;
-  if (!p.Run(args[0]).ToLocal(&result)) return;
-  args.GetReturnValue().Set(result);
+  // Environment* env = Environment::GetCurrent(args);
+  // env->PrintSyncTrace();
+  // SyncProcessRunner p(env);
+  // Local<Value> result;
+  // if (!p.Run(args[0]).ToLocal(&result)) return;
+  // args.GetReturnValue().Set(result);
 }
 
 
diff --git a/tools/gyp/pylib/gyp/common.py b/tools/gyp/pylib/gyp/common.py
index a915643867..4d46c68d49 100644
--- a/tools/gyp/pylib/gyp/common.py
+++ b/tools/gyp/pylib/gyp/common.py
@@ -468,7 +468,7 @@ def CopyTool(flavor, out_path, generator_flags={}):
   to |out_path|."""
     # aix and solaris just need flock emulation. mac and win use more complicated
     # support scripts.
-    prefix = {"aix": "flock", "solaris": "flock", "mac": "mac", "win": "win"}.get(
+    prefix = {"aix": "flock", "solaris": "flock", "mac": "mac", "ios": "mac", "win": "win"}.get(
         flavor, None
     )
     if not prefix:
@@ -484,7 +484,7 @@ def CopyTool(flavor, out_path, generator_flags={}):
     # Set custom header flags.
     header = "# Generated by gyp. Do not edit.\n"
     mac_toolchain_dir = generator_flags.get("mac_toolchain_dir", None)
-    if flavor == "mac" and mac_toolchain_dir:
+    if flavor in ('mac','ios') and mac_toolchain_dir:
         header += "import os;\nos.environ['DEVELOPER_DIR']='%s'\n" % mac_toolchain_dir
 
     # Add header and write it out.
diff --git a/tools/gyp/pylib/gyp/generator/make.py b/tools/gyp/pylib/gyp/generator/make.py
index d163ae3135..6aebbb8464 100644
--- a/tools/gyp/pylib/gyp/generator/make.py
+++ b/tools/gyp/pylib/gyp/generator/make.py
@@ -66,8 +66,8 @@ generator_filelist_paths = None
 def CalculateVariables(default_variables, params):
     """Calculate additional variables for use in the build (called by gyp)."""
     flavor = gyp.common.GetFlavor(params)
-    if flavor == "mac":
-        default_variables.setdefault("OS", "mac")
+    if flavor == "mac" or flavor == "ios":
+        default_variables.setdefault("OS", flavor)
         default_variables.setdefault("SHARED_LIB_SUFFIX", ".dylib")
         default_variables.setdefault(
             "SHARED_LIB_DIR", generator_default_variables["PRODUCT_DIR"]
@@ -758,7 +758,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         self.toolset = spec["toolset"]
 
         self.is_mac_bundle = gyp.xcode_emulation.IsMacBundle(self.flavor, spec)
-        if self.flavor == "mac":
+        if self.flavor == "mac" or self.flavor == "ios":
             self.xcode_settings = gyp.xcode_emulation.XcodeSettings(spec)
         else:
             self.xcode_settings = None
@@ -953,7 +953,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
 
             # Write the actual command.
             action_commands = action["action"]
-            if self.flavor == "mac":
+            if self.flavor == "mac" or self.flavor == "ios":
                 action_commands = [
                     gyp.xcode_emulation.ExpandEnvVars(command, env)
                     for command in action_commands
@@ -1127,7 +1127,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 # action, cd_action, and mkdirs get written to a toplevel variable
                 # called cmd_foo. Toplevel variables can't handle things that change
                 # per makefile like $(TARGET), so hardcode the target.
-                if self.flavor == "mac":
+                if self.flavor == "mac" or self.flavor == "ios":
                     action = [
                         gyp.xcode_emulation.ExpandEnvVars(command, env)
                         for command in action
@@ -1298,7 +1298,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 quoter=EscapeCppDefine,
             )
 
-            if self.flavor == "mac":
+            if self.flavor == "mac" or self.flavor == "ios":
                 cflags = self.xcode_settings.GetCflags(
                     configname,
                     arch=config.get('xcode_configuration_platform')
@@ -1318,7 +1318,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             self.WriteList(cflags_c, "CFLAGS_C_%s" % configname)
             self.WriteLn("# Flags passed to only C++ files.")
             self.WriteList(cflags_cc, "CFLAGS_CC_%s" % configname)
-            if self.flavor == "mac":
+            if self.flavor == "mac" or self.flavor == "ios":
                 self.WriteLn("# Flags passed to only ObjC files.")
                 self.WriteList(cflags_objc, "CFLAGS_OBJC_%s" % configname)
                 self.WriteLn("# Flags passed to only ObjC++ files.")
@@ -1389,7 +1389,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 "%s " % precompiled_header.GetInclude("cc") + "$(CFLAGS_$(BUILDTYPE)) "
                 "$(CFLAGS_CC_$(BUILDTYPE))"
             )
-            if self.flavor == "mac":
+            if self.flavor == "mac" or self.flavor == "ios":
                 self.WriteLn(
                     "$(OBJS): GYP_OBJCFLAGS := "
                     "$(DEFS_$(BUILDTYPE)) "
@@ -1456,7 +1456,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
     """
         assert not self.is_mac_bundle
 
-        if self.flavor == "mac" and self.type in (
+        if (self.flavor == "mac" or self.flavor == "ios") and self.type in (
             "static_library",
             "executable",
             "shared_library",
@@ -1502,7 +1502,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
     def _InstallImmediately(self):
         return (
             self.toolset == "target"
-            and self.flavor == "mac"
+            and (self.flavor == "mac" or self.flavor == "ios")
             and self.type
             in ("static_library", "executable", "shared_library", "loadable_module")
         )
@@ -1592,7 +1592,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         if self.type != "none":
             for configname in sorted(configs.keys()):
                 config = configs[configname]
-                if self.flavor == "mac":
+                if self.flavor == "mac" or self.flavor == "ios":
                     ldflags = self.xcode_settings.GetLdflags(
                         configname,
                         generator_default_variables["PRODUCT_DIR"],
@@ -1626,7 +1626,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                 library_dirs = config.get("library_dirs", [])
                 ldflags += [("-L%s" % library_dir) for library_dir in library_dirs]
                 self.WriteList(ldflags, "LDFLAGS_%s" % configname)
-                if self.flavor == "mac":
+                if self.flavor == "mac" or self.flavor == "ios":
                     self.WriteList(
                         self.xcode_settings.GetLibtoolflags(configname),
                         "LIBTOOLFLAGS_%s" % configname,
@@ -1635,7 +1635,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             if libraries:
                 # Remove duplicate entries
                 libraries = gyp.common.uniquer(libraries)
-                if self.flavor == "mac":
+                if self.flavor == "mac" or self.flavor == "ios":
                     libraries = self.xcode_settings.AdjustLibraries(libraries)
             self.WriteList(libraries, "LIBS")
             self.WriteLn(
@@ -1644,7 +1644,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             )
             self.WriteLn("%s: LIBS := $(LIBS)" % QuoteSpaces(self.output_binary))
 
-            if self.flavor == "mac":
+            if self.flavor == "mac" or self.flavor == "ios":
                 self.WriteLn(
                     "%s: GYP_LIBTOOLFLAGS := $(LIBTOOLFLAGS_$(BUILDTYPE))"
                     % QuoteSpaces(self.output_binary)
@@ -1653,7 +1653,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
         # Postbuild actions. Like actions, but implicitly depend on the target's
         # output.
         postbuilds = []
-        if self.flavor == "mac":
+        if self.flavor == "mac" or self.flavor == "ios":
             if target_postbuilds:
                 postbuilds.append("$(TARGET_POSTBUILDS_$(BUILDTYPE))")
             postbuilds.extend(gyp.xcode_emulation.GetSpecPostbuildCommands(spec))
@@ -1763,7 +1763,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
                     "Spaces in alink input filenames not supported (%s)" % link_dep
                 )
             if (
-                self.flavor not in ("mac", "openbsd", "netbsd", "win")
+                self.flavor not in ("mac", "ios", "openbsd", "netbsd", "win")
                 and not self.is_standalone_static_library
             ):
                 self.WriteDoCmd(
@@ -1855,7 +1855,7 @@ $(obj).$(TOOLSET)/$(TARGET)/%%.o: $(obj)/%%%s FORCE_DO_CMD
             install_path = self._InstallableTargetInstallPath()
             installable_deps = [self.output]
             if (
-                self.flavor == "mac"
+                (self.flavor == "mac" or self.flavor == "ios")
                 and "product_dir" not in spec
                 and self.toolset == "target"
             ):
@@ -2296,7 +2296,7 @@ def GenerateOutput(target_list, target_dicts, data, params):
         "CXX.host": GetEnvironFallback(("CXX_host", "CXX"), "g++"),
         "LINK.host": GetEnvironFallback(("LINK_host", "LINK"), "$(CXX.host)"),
     }
-    if flavor == "mac":
+    if flavor == "mac" or flavor == "ios":
         flock_command = "./gyp-mac-tool flock"
         header_params.update(
             {
@@ -2444,7 +2444,7 @@ def GenerateOutput(target_list, target_dicts, data, params):
         spec = target_dicts[qualified_target]
         configs = spec["configurations"]
 
-        if flavor == "mac":
+        if flavor == "mac" or flavor == "ios":
             gyp.xcode_emulation.MergeGlobalXcodeSettingsToSpec(data[build_file], spec)
 
         writer = MakefileWriter(generator_flags, flavor)
diff --git a/tools/gyp/pylib/gyp/xcode_emulation.py b/tools/gyp/pylib/gyp/xcode_emulation.py
index a79aaa41fb..ef89748709 100644
--- a/tools/gyp/pylib/gyp/xcode_emulation.py
+++ b/tools/gyp/pylib/gyp/xcode_emulation.py
@@ -558,8 +558,7 @@ class XcodeSettings(object):
         return XcodeSettings._sdk_path_cache[sdk_root]
 
     def _AppendPlatformVersionMinFlags(self, lst):
-        self._Appendf(lst, "MACOSX_DEPLOYMENT_TARGET", "-mmacosx-version-min=%s")
-        if "IPHONEOS_DEPLOYMENT_TARGET" in self._Settings():
+        if 'IPHONEOS_DEPLOYMENT_TARGET' in self._Settings() and self._Settings()['IPHONEOS_DEPLOYMENT_TARGET']:
             # TODO: Implement this better?
             sdk_path_basename = os.path.basename(self._SdkPath())
             if sdk_path_basename.lower().startswith("iphonesimulator"):
@@ -570,6 +569,9 @@ class XcodeSettings(object):
                 self._Appendf(
                     lst, "IPHONEOS_DEPLOYMENT_TARGET", "-miphoneos-version-min=%s"
                 )
+        else:
+            self._Appendf(lst, "MACOSX_DEPLOYMENT_TARGET", "-mmacosx-version-min=%s")
+            
 
     def GetCflags(self, configname, arch=None):
         """Returns flags that need to be added to .c, .cc, .m, and .mm
diff --git a/tools/v8_gypfiles/toolchain.gypi b/tools/v8_gypfiles/toolchain.gypi
index d4bad70d45..f3fcfaea09 100644
--- a/tools/v8_gypfiles/toolchain.gypi
+++ b/tools/v8_gypfiles/toolchain.gypi
@@ -1102,6 +1102,25 @@
           }],
         ],
       }],
+      ['OS=="ios"', {
+        'target_conditions': [
+          ['_toolset=="host" and host_os=="mac"', {
+            'xcode_settings': {
+              'SDKROOT': '',
+              'IPHONEOS_DEPLOYMENT_TARGET': '',
+              'MACOSX_DEPLOYMENT_TARGET': '10.10',
+            },
+            'conditions':[
+              ['target_arch=="arm64"', {
+                'xcode_settings': {
+                  'ARCHS!': ['arm64'],
+                  'ARCHS': ['x86_64'],
+                },
+              }],
+            ],
+          }],
+        ]
+      }],
     ],  # conditions
     'configurations': {
       'Debug': {
